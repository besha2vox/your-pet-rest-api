{
  "openapi": "3.0.1",
  "info": {
    "version": "0.0.1",
    "title": "Your Pets",
    "description": "",
    "license": {
      "name": "Swagger UI Express Documentation",
      "url": "https://www.npmjs.com/package/swagger-ui-express"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [{ "url": "https://your-pet-by-it-kotiki.onrender.com" }, { "url": "http://localhost:3000" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Notices",
      "description": "Endpoints for notices managing"
    },
    {
      "name": "Pets",
      "description": "Endpoints for user's pets"
    },
    {
      "name": "News",
      "description": "News endpoints"
    },
    {
      "name": "Friends",
      "description": "Friends endpoints"
    }
  ],
  "paths": {
    "/api/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register new user",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Email in use"
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log in a user",
        "requestBody": {
          "description": "Log in existing user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Email or password is wrong"
          }
        }
      }
    },
    "/api/users/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh token",
        "requestBody": {
          "description": "Refresh access token using valid refreshToken",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Token successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Invalid token"
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Current user retrieved successfully",
            "content": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetCurrentUserResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log out of the current user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "User logged out successfully"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },

    "/api/users/:id": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get User info and user's pets",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Get information about user by id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "No info found of user's pet",
            "content": {}
          }
        }
      },
      "put": {
        "tags": ["Auth"],
        "summary": "Update user info",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Update information about user by id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "400": {
            "description": "The user is not updated",
            "content": {}
          }
        }
      }
    },
    "/api/users/pets/:id": {
      "put": {
        "tags": ["Auth"],
        "summary": "Update info about user's pet",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Update information about user's pet by id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostPetsResponse"
                }
              }
            }
          },

          "400": {
            "description": "The user is not updated",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "403": {
            "description": "User has no access to update the pet",
            "content": {}
          },
          "404": {
            "description": "The pet is not found",
            "content": {}
          }
        }
      }
    },

    "/api/notices/{category}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get notices by category",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "string",
            "description": "Page number for pagination. Default 1."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string",
            "description": "Count of articles per page. Default 6."
          },
          {
            "in": "query",
            "name": "gender",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["male", "female"]
            }
          },
          {
            "in": "query",
            "name": "age",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["3m-12m", "1y", "2y"]
            },

            "description": "value for filter by age"
          },
          {
            "in": "path",
            "name": "category",
            "required": true,

            "type": "string",

            "description": "one of: sell, slost-found, in-good-hands"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNoticeResponse"
                }
              }
            }
          },
          "404": {
            "description": "No notices found for given category",
            "content": {}
          }
        }
      },
      "post": {
        "tags": ["Notices"],
        "summary": "Add new notice by category",
        "security": [{ "Bearer": [] }],
        "description": "Adds a new pet notice to the specified category",
        "operationId": "addNotice",
        "parameters": [
          {
            "in": "path",
            "name": "category",
            "description": "The category of the notice",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["sell", "in-good-hands", "lost-found"]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "pets-photo": {
                    "type": "string",
                    "format": "binary"
                  },
                  "titleOfAdd": {
                    "type": "string",
                    "description": "Title of notice",
                    "required": true
                  },
                  "name": {
                    "type": "string",
                    "description": "Pet's name",
                    "required": true
                  },
                  "birthday": {
                    "type": "string",
                    "description": "Pet's birthday",
                    "required": true
                  },
                  "breed": {
                    "type": "string",
                    "description": "Pet's breed",
                    "required": true
                  },
                  "location": {
                    "type": "string",
                    "description": "Pet's location",
                    "required": true
                  },
                  "price": {
                    "type": "number",
                    "description": "Price for pet",
                    "required": false
                  },
                  "sex": {
                    "type": "string",
                    "enum": ["male", "female"]
                  },
                  "comments": {
                    "type": "string",
                    "description": "Comments about pet"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetNoticeResponse"
                  },
                  {
                    "if": {
                      "properties": {
                        "category": {
                          "const": "sell"
                        }
                      }
                    },
                    "then": {
                      "required": ["price"]
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Notice created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNoticeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/api/notices/notice/{id}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get notice by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Get information about the notice by id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNoticeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Notice not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": ["Notices"],
        "summary": "Delete notice by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Delete the notice with the specified ID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Notice not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": ["Notices"],
        "summary": "Updates notice",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Updates notice by ID"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "pets-photo": {
                    "type": "string",
                    "format": "binary"
                  },
                  "titleOfAdd": {
                    "type": "string",
                    "description": "Title of notice"
                  },
                  "name": {
                    "type": "string",
                    "description": "Pet's name"
                  },
                  "birthday": {
                    "type": "string",
                    "description": "Pet's birthday"
                  },
                  "breed": {
                    "type": "string",
                    "description": "Pet's breed"
                  },
                  "location": {
                    "type": "string",
                    "description": "Pet's location"
                  },
                  "price": {
                    "type": "number",
                    "description": "Price for pet"
                  },
                  "sex": {
                    "type": "string",
                    "enum": ["male", "female"]
                  },
                  "comments": {
                    "type": "string",
                    "description": "Comments about pet"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetNoticeResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No notices found for given category",
            "content": {}
          }
        }
      }
    },
    "/api/notices/favorite/{id}": {
      "post": {
        "tags": ["Notices"],
        "summary": "Adds the notice with the specified ID to the user's favorites list",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,

            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",

            "400": {
              "description": "Invalid request body or parameters"
            },
            "401": {
              "description": "User is not authenticated"
            },
            "404": {
              "description": "Notice with the specified ID not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "delete": {
        "tags": ["Notices"],
        "summary": "Removes the notice with the specified ID from the user's favorites list",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the notice to remove from favorites"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid request body or parameters"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "404": {
            "description": "Notice with the specified ID not found or not in favorites list"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/notices/favorites": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get favorite notices",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "string",
            "description": "Page number for pagination. Default 1."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string",
            "description": "Count of articles per page. Default 6."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetNoticeResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No favorite notices found ",
            "content": {}
          }
        }
      }
    },
    "/api/notices": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get notices created by user",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetNoticeResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No notices found for given category",
            "content": {}
          }
        }
      }
    },
    "/api/notices/search/{category}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Search notices by category and query",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "string",
            "description": "Page number for pagination. Default 1."
          },

          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string",
            "description": "Count of articles per page. Default 12."
          },
          {
            "in": "query",
            "name": "gender",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["male", "female"]
            }
          },
          {
            "in": "query",
            "name": "age",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["3m-12m", "1y", "2y"]
            },

            "description": "value for filter by age"
          },
          {
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["sell", "in-good-hands", "lost-found"]
            },
            "description": "choose category"
          },
          {
            "in": "query",
            "name": "query",
            "required": true,

            "type": "string",
            "description": "The search query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchNoticesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body or parameters"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/news": {
      "get": {
        "tags": ["News"],
        "summary": "News about pets",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "string",
            "description": "Page number for pagination. Default 1."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string",
            "description": "Count of articles per page. Default 6."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNewsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/news/search": {
      "get": {
        "tags": ["News"],
        "summary": "Find news by key words",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "string",
            "description": "Page number for pagination. Default 1."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string",
            "description": "Count of articles per page. Default 6."
          },
          {
            "in": "query",
            "name": "query",
            "required": true,
            "type": "string",
            "description": "Query string",
            "example": "dog"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNewsResponse"
                }
              }
            }
          },
          "404": {
            "description": "No match for your search"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/friends": {
      "get": {
        "tags": ["Friends"],
        "summary": "Our Friends",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "string",
            "description": "Page number for pagination. Default 1."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string",
            "description": "Count of articles per page. Default 9."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFriendsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/pets": {
      "post": {
        "tags": ["Pets"],
        "summary": "Add user's pet",
        "parameters": [
          {
            "in": "path",
            "name": "pets",
            "required": true,
            "type": "string",
            "description": "Add user's pet"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "pets-photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "pet's avatar"
                  },
                  "name": {
                    "type": "string",
                    "description": "Pet's name",
                    "required": true
                  },
                  "birthday": {
                    "type": "date",
                    "description": "Pet's birthday",
                    "required": true
                  },
                  "breed": {
                    "type": "string",
                    "description": "Pet's breed",
                    "required": true
                  },
                  "comments": {
                    "type": "string",
                    "description": "Comments about pet"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Information about the pet was published",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostPetsResponse"
                }
              }
            }
          },
          "400": {
            "description": "400, `The file is not loaded/The text fields are not filled in"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/pets/:id": {
      "delete": {
        "tags": ["Pets"],
        "summary": "Delete the pet by id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Delete the pet by id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The pet was deleted"
          },
          "404": {
            "description": "Pet with id ${id} not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["username", "email", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "John Smith"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Test1234"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token for the logged-in user"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token for the logged-in user"
          },
          "user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "User's name",
                "example": "John Smith"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "required": ["refreshToken"],
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token for the logged-in user"
          }
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token for the logged-in user"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token for the logged-in user"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token for the logged-in user"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token for the logged-in user"
          },
          "user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "User's name",
                "example": "John Smith"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },
      "GetCurrentUserResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the current user"
          },
          "email": {
            "type": "string",
            "description": "The email of the current user"
          }
        }
      },

      "GetUserInfoResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the user"
          },
          "city": {
            "type": "string",
            "description": "Name of the user's city",
            "example": "Kyiv"
          },
          "birthday": {
            "type": "string",
            "description": "The user's birthday",
            "example": "11.12.2022"
          },
          "pet": {
            "type": "array",
            "description": "The user's pets",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "User's pet id from DB"
                },
                "name": {
                  "type": "string",
                  "example": "Bob"
                },
                "birthday": {
                  "type": "string",
                  "description": "Pet's birthday",
                  "example": "11.12.2022"
                },
                "breed": {
                  "type": "string",
                  "example": "Husky"
                },
                "comments": {
                  "type": "string",
                  "description": "Something about your pet"
                },
                "avatarURL": {
                  "type": "string",
                  "description": "Link to photo your pet"
                }
              }
            }
          }
        }
      },

      "GetNoticeResponse": {
        "type": "object",
        "properties": {
          "titleOfAdd": {
            "type": "string",
            "description": "Title of notice",
            "example": "Looking for good friend"
          },
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Luna"
          },
          "birthday": {
            "type": "string",
            "description": "Pet's birthday",
            "example": "11.12.2022"
          },
          "breed": {
            "type": "string",
            "description": "Pet's breed",
            "example": "Husky"
          },
          "location": {
            "type": "string",
            "description": "Pet's location",
            "example": "Lviv"
          },
          "price": {
            "type": "number",
            "description": "price for pet",
            "example": "200"
          },
          "sex": {
            "type": "string",
            "description": "Pet's sex",
            "example": "male"
          },
          "avatarURL": {
            "type": "string",
            "description": "Pet's image url",
            "example": "https://images.unsplash.com/photo-1592754862816-1a21a4ea2281?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80"
          },
          "comments": {
            "type": "string",
            "description": "comments about pet",
            "example": "Loves to play fetch and swim in the pool. Good with kids and other pets."
          },
          "category": {
            "type": "string",
            "description": "Pet's category",
            "example": "sell"
          }
        }
      },
      "SearchNoticesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNoticeResponse"
            },
            "description": "List of notices matching the search query"
          },
          "totalResults": {
            "type": "integer",
            "description": "Total number of results matching the search query"
          }
        }
      },
      "GetNewsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Article's id from DB"
            },
            "imgUrl": {
              "type": "string",
              "description": "Article's Image"
            },
            "title": {
              "type": "string",
              "description": "Title"
            },
            "text": {
              "type": "string",
              "description": "Text"
            },
            "date": {
              "type": "string",
              "description": "Release Date"
            },
            "url": {
              "type": "string",
              "description": "Link"
            },
            "id": {
              "type": "string",
              "description": "Article's id from source"
            }
          }
        },
        "example": [
          {
            "_id": "645cdf279f3f111d137d54e8",
            "imgUrl": "https://www.nytimes.com/images/2023/04/16/magazine/16mag-LOR/16mag-LOR-blog480.jpg",
            "title": "What I Learned Dogsitting for New York City’s Opulent Elite",
            "text": "In a city of yawning class inequality, some side hustles let you glimpse how the other half lives.",
            "date": "2023-04-11T09:00:18+0000",
            "url": "https://www.nytimes.com/2023/04/11/magazine/dogsitting-rich-new-york.html",
            "id": "nyt://article/8d29f1fc-d146-509d-8ceb-5a5b17d7886b"
          },
          {
            "_id": "645cdf279f3f111d137d54e9",
            "imgUrl": "https://www.nytimes.com/images/2023/04/04/multimedia/00VIRTUAL-VETS-01b-fmzk/00VIRTUAL-VETS-01b-fmzk-blog480.jpg",
            "title": "The Virtual Vet Will See You Meow",
            "text": "Veterinary telemedicine could help more pet owners access much-needed care and put anxious animals at ease, but challenges remain.",
            "date": "2023-04-07T09:00:46+0000",
            "url": "https://www.nytimes.com/2023/04/07/health/vet-pet-health-telemedicine.html",
            "id": "nyt://article/992f2f7f-793c-5553-b722-348625f53a4b"
          }
        ]
      },
      "GetFriendsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Friends id from DB"
            },
            "title": {
              "type": "string",
              "description": "Friend's Name"
            },
            "url": {
              "type": "string",
              "description": "WebSite URL"
            },
            "addressUrl": {
              "type": "string",
              "description": "Google Map Location URL"
            },
            "imageUrl": {
              "type": "string",
              "description": "Logo"
            },
            "address": {
              "type": "string",
              "description": "Address"
            },
            "workDays": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "isOpen": {
                    "type": "boolean",
                    "description": "Work/Weekend"
                  },
                  "from": {
                    "type": "string",
                    "description": "Start work time"
                  },
                  "to": {
                    "type": "string",
                    "description": "End work time"
                  }
                }
              }
            },
            "phone": {
              "type": "string",
              "description": "Phone number"
            },
            "email": {
              "type": "string",
              "description": "Email"
            }
          }
        },
        "example": [
          {
            "_id": "645cdc949f3f111d137d54de",
            "title": "Happy Paw",
            "url": "https://happypaw.ua/ua",
            "addressUrl": "https://goo.gl/maps/3RyzTYBvMr9WQWCC6",
            "imageUrl": "https://storage.googleapis.com/kidslikev2_bucket/pets-support/images/sponsors/frame_288.png",
            "address": "Київ, вулиця Шота Руставелі, 44 (3-й поверх, офіс 7)",
            "workDays": [
              {
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              }
            ],
            "phone": "+380442900329",
            "email": "hello@happypaw.ua"
          },
          {
            "_id": "645cdc949f3f111d137d54df",
            "title": "Харківський міський притулок для тварин",
            "url": "https://www.city.kharkov.ua/uk/news/-51132.html",
            "addressUrl": "https://goo.gl/maps/gjMzx3ifaRgXSftP9",
            "imageUrl": null,
            "address": "м. Харків, вул. Квітки-Основ'яненка, 7, 2-й пов.",
            "workDays": null,
            "phone": "+380577607961",
            "email": "press@citynet.kharkov.ua"
          }
        ]
      },
      "PostPetsResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pet's name"
          },
          "birthday": {
            "type": "string",
            "description": "Pet's birthday"
          },
          "breed": {
            "type": "string",
            "description": "Pet's breed"
          },
          "avatarURL": {
            "type": "string",
            "description": "Pet's image url"
          },
          "comments": {
            "type": "string",
            "description": "comments about pet"
          },
          "owner": {
            "type": "string",
            "description": "pet's owner"
          },
          "_id": {
            "type": "string",
            "description": "pet's id"
          }
        },
        "example": {
          "name": "Derek",
          "birthday": "2019-04-03T21:00:00.000Z",
          "breed": "domestic cat",
          "comments": "my lovely cat",
          "owner": "645f88639994886006f9a291",
          "avatarURL": "https://res.cloudinary.com/dgei1ulzc/image/upload/v1684017393/ryt2sd2jixhzisfzubvv.jpg",
          "_id": "646010f2da84cd379a718d04"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
